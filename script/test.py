# import json

# file_path = "/home/stud/abedinz1/localDisk/RAG/RAG/data/100_blocks_neg.json"

# # Read and load each line as a separate JSON object
# with open(file_path, 'r') as f:
#     data = []
#     for line in f:
#         try:
#             # Load each line as a JSON object
#             json_object = json.loads(line)
#             data.append(json_object)
#         except json.JSONDecodeError as e:
#             print(f"Error decoding JSON on line: {e}")

# # Now, `data` contains a list of all JSON objects
# print(type(data))  # This should be a list
# print(f"Number of items loaded: {len(data)}")

# # Check the keys of the first JSON object (if any data was loaded)
# if data:
#     print(data[0].keys())


#list from 100neg from oc
list1 = ['B08J4LFDSR', 'B08T1VR8QW', 'B093HG4Y48', 'B08PQ5ZCNP', 'B08BX7QGKF', 'B09DRHTSYZ', 'B08F9C8VL9', 'B09Q98BRRN', 'B09GRFXNDZ', 'B085WTR7BJ', 'B0B3BKNKRW', 'B08FTM34P5', 'B08WF93R89', 'B08FCVNVX8', 'B0933K762G', 'B088N4TRG5', 'B089XZ3SZN', 'B08FVLNQ3M', 'B085F3VMT8', 'B08T1WZFN7', 'B08HFFFF8B', 'B09DRKKGGV', 'B088XZFKJ5', 'B08H8DH3RM', 'B08H89NT8R', 'B089YXP2Z1', 'B09S6VPC2Q', 'B097C3TS3Q', 'B093275JHT', 'B08NCFGTJ7', 'B09352C4XY', 'B08H5SNLML', 'B08HC5GMK2', 'B089HNHZ17', 'B0934RR19J', 'B0933GDLZZ', 'B0933JJCNK', 'B093ZCPS14', 'B08FMX83BL', 'B01N6NTIRH', 'B07PR1Z2BF', 'B07WF9K475', 'B07RB78W37', 'B09PFDQ6W8', 'B09WCRF1RQ', 'B07MY7XPNZ', 'B09NX6CSPP', 'B07XWVPRWZ', 'B07W138SHD', 'B08CRY42NG', 'B082WNRSPY', 'B07HXHPNKH', 'B07WJJFKYW', 'B07SZH8X5F', 'B00VQQ294C', 'B09JFN8K6T', 'B08KYHB8SM', 'B01DYGKM0E', 'B09QNWPHX3', 'B00HEYIBH4', 'B07Z6Q9NCZ', 'B0843HCT63', 'B09WJM9XVW', 'B0B3B8VY4D', 'B07YZLRS3Z', 'B07ZS1B6ZJ', 'B08Y8PKDTC', 'B09B79YT3S', 'B07MC98SJZ', 'B07PYT9767', 'B08PFGPGRM', 'B08K3D8FB4', 'B08RBHHHY3', 'B075QWLV3J', 'B075TYP6P6', 'B07N8JMK4Q', 'B08MV9MRLN', 'B07PHC7VVN', 'B07D3QKRW1', 'B07V9X47LK', 'B07Z4WMV5W', 'B08JRVMXMM', 'B07215XFYG', 'B00OL4DEMC', 'B01MUBRKX4', 'B079XYJ4FJ', 'B01FSV8782', 'B08YR5WN6D', 'B0891J72MY', 'B08CRYL9JJ', 'B08FKYPC7F', 'B00EN6D8H4', 'B01JB4NP6Q', 'B094N67BMW', 'B0888TJWCW', 'B07FZ6CRRT', 'B093XCL8PZ', 'B08FL1N9V3', 'B076B3K2ZJ', 'B0747WWP4D', 'B01LWSWP3C', 'B01JGYLV4O', 'B088MKVYTF', 'B077F17R8H', 'B07PHTYGY7', 'B009EAG8CQ', 'B09N4P1ZW1', 'B0799ZMY6D', 'B0B2F4LMS2', 'B08R61G69Q', 'B07HKN1GL6', 'B07PQSYGKB', 'B07V3TL48P', 'B09BM2FZ3M', 'B07VYPJCRW', 'B07CGCG23Q', 'B0769Z7WVQ', 'B07CMMGLL3', 'B07PX3ZRJ6', 'B07L4WRXXT', 'B088N774B7', 'B07XY8YFQQ', 'B08R7D4KZJ', 'B09DSP8TSJ', 'B08H5SZKC9', 'B07BBQYCNW', 'B07BBRCH91', 'B07PT3R6P6', 'B00KR0VGAG', 'B07VCB7P1L', 'B07DWWKGW8', 'B01M33F1YQ', 'B01CDJ7I5K', 'B01A1VTHHY', 'B00AWVM0DW', 'B01CZ33IS0', 'B07G7VSVQN', 'B07B1VN8ZL', 'B08C6YB4LY', 'B09KYF9XCD', 'B0748Z1VJ3', 'B075Z5D45N', 'B07ZHNVL55', 'B01ER6UAP2', 'B07GC5FZDM', 'B07GBX115M', 'B08J4JYD47', 'B07Y5R57FS', 'B09239L59W', 'B07Y5TTS2Q', 'B074HY3LRB', 'B07GBRB55Z', 'B077RM9WJB', 'B09CLNH78M', 'B085P16MD8', 'B09CLP7ZFR', 'B0841HHLT9', 'B07KP8J8YN', 'B08JLSJ6JW', 'B09J4TPZDD', 'B08WWQWGDN', 'B08JLT512D', 'B098KF1G4Q', 'B01N071CQE', 'B086G9NF1P', 'B07GC7MF21', 'B07Y5TS6XX', 'B07DT7LBSK', 'B09W3PK64J', 'B07RQFB4TP', 'B08BX8BZ1P', 'B07BTG3T3Y', 'B07WG9TNMW', 'B016YH55AC', 'B07MQVW2T6', 'B00GBAO2ES', 'B00FX7703A', 'B019M7ZY70', 'B08GM7DRXM']


#list from rag for 100neg
#list2 = ['B08J4LFDSR', 'B08T1VR8QW', 'B093HG4Y48', 'B08PQ5ZCNP', 'B08BX7QGKF', 'B09DRHTSYZ', 'B08F9C8VL9', 'B09Q98BRRN', 'B09GRFXNDZ', 'B085WTR7BJ', 'B0B3BKNKRW', 'B08FTM34P5', 'B08WF93R89', 'B08FCVNVX8', 'B0933K762G', 'B088N4TRG5', 'B089XZ3SZN', 'B08FVLNQ3M', 'B085F3VMT8', 'B08T1WZFN7', 'B08HFFFF8B', 'B09DRKKGGV', 'B088XZFKJ5', 'B08H8DH3RM', 'B08H89NT8R', 'B089YXP2Z1', 'B09S6VPC2Q', 'B097C3TS3Q', 'B093275JHT', 'B08NCFGTJ7', 'B09352C4XY', 'B08H5SNLML', 'B08HC5GMK2', 'B089HNHZ17', 'B0934RR19J', 'B0933GDLZZ', 'B0933JJCNK', 'B093ZCPS14', 'B08FMX83BL', 'B01N6NTIRH', 'B07PR1Z2BF', 'B07WF9K475', 'B07RB78W37', 'B09PFDQ6W8', 'B09WCRF1RQ', 'B07MY7XPNZ', 'B09NX6CSPP', 'B07XWVPRWZ', 'B07W138SHD', 'B08CRY42NG', 'B082WNRSPY', 'B07HXHPNKH', 'B07WJJFKYW', 'B07SZH8X5F', 'B00VQQ294C', 'B09JFN8K6T', 'B08KYHB8SM', 'B01DYGKM0E', 'B09QNWPHX3', 'B00HEYIBH4', 'B07Z6Q9NCZ', 'B0843HCT63', 'B09WJM9XVW', 'B0B3B8VY4D', 'B07YZLRS3Z', 'B07ZS1B6ZJ', 'B08Y8PKDTC', 'B09B79YT3S', 'B07MC98SJZ', 'B07PYT9767', 'B08PFGPGRM', 'B08K3D8FB4', 'B08RBHHHY3', 'B075QWLV3J', 'B075TYP6P6', 'B07N8JMK4Q', 'B08MV9MRLN', 'B07PHC7VVN', 'B07D3QKRW1', 'B07V9X47LK', 'B07Z4WMV5W', 'B08JRVMXMM', 'B07215XFYG', 'B00OL4DEMC', 'B01MUBRKX4', 'B079XYJ4FJ', 'B01FSV8782', 'B08YR5WN6D', 'B0891J72MY', 'B08CRYL9JJ', 'B08FKYPC7F', 'B00EN6D8H4', 'B01JB4NP6Q', 'B094N67BMW', 'B0888TJWCW', 'B07FZ6CRRT', 'B093XCL8PZ', 'B08FL1N9V3', 'B076B3K2ZJ', 'B0747WWP4D', 'B01LWSWP3C', 'B01JGYLV4O', 'B088MKVYTF', 'B077F17R8H', 'B07PHTYGY7', 'B009EAG8CQ', 'B09N4P1ZW1', 'B0799ZMY6D', 'B0B2F4LMS2', 'B08R61G69Q', 'B07HKN1GL6', 'B07PQSYGKB', 'B07V3TL48P', 'B09BM2FZ3M', 'B07VYPJCRW', 'B07CGCG23Q', 'B0769Z7WVQ', 'B07CMMGLL3', 'B07PX3ZRJ6', 'B07L4WRXXT', 'B088N774B7', 'B07XY8YFQQ', 'B08R7D4KZJ', 'B09DSP8TSJ', 'B08H5SZKC9', 'B07BBQYCNW', 'B07BBRCH91', 'B07PT3R6P6', 'B00KR0VGAG', 'B07VCB7P1L', 'B07DWWKGW8', 'B01M33F1YQ', 'B01CDJ7I5K', 'B01A1VTHHY', 'B00AWVM0DW', 'B01CZ33IS0', 'B07G7VSVQN', 'B07B1VN8ZL', 'B08C6YB4LY', 'B09KYF9XCD', 'B0748Z1VJ3', 'B075Z5D45N', 'B07ZHNVL55', 'B01ER6UAP2', 'B07GC5FZDM', 'B07GBX115M', 'B08J4JYD47', 'B07Y5R57FS', 'B09239L59W', 'B07Y5TTS2Q', 'B074HY3LRB', 'B07GBRB55Z', 'B077RM9WJB', 'B09CLNH78M', 'B085P16MD8', 'B09CLP7ZFR', 'B0841HHLT9', 'B07KP8J8YN', 'B08JLSJ6JW', 'B09J4TPZDD', 'B08WWQWGDN', 'B08JLT512D', 'B098KF1G4Q', 'B01N071CQE', 'B086G9NF1P', 'B07GC7MF21', 'B07Y5TS6XX', 'B07DT7LBSK', 'B09W3PK64J', 'B07RQFB4TP', 'B08BX8BZ1P', 'B07BTG3T3Y', 'B07WG9TNMW', 'B016YH55AC', 'B07MQVW2T6', 'B00GBAO2ES', 'B00FX7703A', 'B019M7ZY70', 'B08GM7DRXM']
 

#list from conversation preporcessing
list2=['B01JB4NP6Q', 'B075TYP6P6', 'B01N6NTIRH', 'B0933K762G', 'B08R61G69Q', 'B09KYF9XCD', 'B0891J72MY', 'B08H5SZKC9', 'B07W138SHD', 'B0B3B8VY4D', 'B07B1VN8ZL', 'B093XCL8PZ', 'B0B2F4LMS2', 'B09S6VPC2Q', 'B07Z6Q9NCZ', 'B08JRVMXMM', 'B07PHTYGY7', 'B07HKN1GL6', 'B088N774B7', 'B09N4P1ZW1', 'B0933JJCNK', 'B08PFGPGRM', 'B07WJJFKYW', 'B08CRYL9JJ', 'B01MUBRKX4', 'B07Y5R57FS', 'B08H89NT8R', 'B07GC7MF21', 'B07MQVW2T6', 'B08PQ5ZCNP', 'B07PQSYGKB', 'B01A1VTHHY', 'B01CZ33IS0', 'B00VQQ294C', 'B07XWVPRWZ', 'B07FZ6CRRT', 'B07G7VSVQN', 'B08Y8PKDTC', 'B09NX6CSPP', 'B01N071CQE', 'B00HEYIBH4', 'B08HFFFF8B', 'B089YXP2Z1', 'B09JFN8K6T', 'B016YH55AC', 'B09Q98BRRN', 'B08WWQWGDN', 'B098KF1G4Q', 'B08F9C8VL9', 'B07DT7LBSK', 'B08JLSJ6JW', 'B075Z5D45N', 'B076B3K2ZJ', 'B09CLNH78M', 'B0748Z1VJ3', 'B01M33F1YQ', 'B09QNWPHX3', 'B09CLP7ZFR', 'B009EAG8CQ', 'B0843HCT63', 'B09B79YT3S', 'B093HG4Y48', 'B09DRKKGGV', 'B07PHC7VVN', 'B01LWSWP3C', 'B0799ZMY6D', 'B089HNHZ17', 'B0888TJWCW', 'B08J4JYD47', 'B08WF93R89', 'B0B3BKNKRW', 'B08H8DH3RM', 'B09352C4XY', 'B08BX8BZ1P', 'B08H5SNLML', 'B085F3VMT8', 'B07WG9TNMW', 'B08CRY42NG', 'B08NCFGTJ7', 'B09239L59W', 'B0934RR19J', 'B08HC5GMK2', 'B08FL1N9V3', 'B086G9NF1P', 'B07KP8J8YN', 'B07MC98SJZ', 'B07215XFYG', 'B077F17R8H', 'B00AWVM0DW', 'B085P16MD8', 'B07D3QKRW1', 'B019M7ZY70', 'B07XY8YFQQ', 'B00EN6D8H4', 'B093275JHT', 'B088MKVYTF', 'B07GC5FZDM', 'B00GBAO2ES', 'B07PT3R6P6', 'B09DRHTSYZ', 'B09DSP8TSJ', 'B07ZHNVL55', 'B07PYT9767', 'B07ZS1B6ZJ', 'B088N4TRG5', 'B085WTR7BJ', 'B07YZLRS3Z', 'B093ZCPS14', 'B07Z4WMV5W', 'B00OL4DEMC', 'B07V3TL48P', 'B088XZFKJ5', 'B0841HHLT9', 'B07WF9K475', 'B07SZH8X5F', 'B01FSV8782', 'B07PX3ZRJ6', 'B075QWLV3J', 'B07BBQYCNW', 'B08MV9MRLN', 'B08FKYPC7F', 'B07CGCG23Q', 'B07BTG3T3Y', 'B07CMMGLL3', 'B01JGYLV4O', 'B0747WWP4D', 'B01DYGKM0E', 'B094N67BMW', 'B077RM9WJB', 'B08R7D4KZJ', 'B07RB78W37', 'B09GRFXNDZ', 'B074HY3LRB', 'B07V9X47LK', 'B07HXHPNKH', 'B09WCRF1RQ', 'B0933GDLZZ', 'B08K3D8FB4', 'B08C6YB4LY', 'B07BBRCH91', 'B07N8JMK4Q', 'B08FCVNVX8', 'B08GM7DRXM', 'B09WJM9XVW', 'B09PFDQ6W8', 'B08RBHHHY3', 'B0769Z7WVQ', 'B08JLT512D', 'B082WNRSPY', 'B07DWWKGW8', 'B08T1WZFN7', 'B08KYHB8SM', 'B08J4LFDSR', 'B08FVLNQ3M', 'B07MY7XPNZ', 'B07PR1Z2BF', 'B00KR0VGAG', 'B07Y5TS6XX', 'B07VCB7P1L', 'B01ER6UAP2', 'B07RQFB4TP', 'B07GBRB55Z', 'B079XYJ4FJ', 'B09BM2FZ3M', 'B07L4WRXXT', 'B08FMX83BL', 'B07VYPJCRW', 'B00FX7703A', 'B097C3TS3Q', 'B089XZ3SZN', 'B07GBX115M', 'B09J4TPZDD', 'B08YR5WN6D', 'B08BX7QGKF', 'B08FTM34P5', 'B08T1VR8QW', 'B01CDJ7I5K', 'B07Y5TTS2Q', 'B09W3PK64J'] 

# Finding common elements
common_elements = set(list1) & set(list2)

# Getting the lengths of the lists
length_list1 = len(list1)
length_list2 = len(list2)
common_count = len(common_elements)

# Output
print("List 1 length:", length_list1)
print("List 2 length:", length_list2)
print("Common elements:", common_elements)
print("Number of common elements:", common_count)
